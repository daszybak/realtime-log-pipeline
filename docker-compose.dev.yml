# Created by an LLM.
# Edited by me: 
# image versions, grafana x-frame-options, rabbitmq, 
# grafana's credentials to match postgresql's, removed extra grafana datasource.

# Development Docker Compose
# Run infrastructure services in containers
# Run Go services and React app locally with `just` for hot-reload

# Note: version field omitted as per latest Docker Compose standards

# Set project name for log filtering
name: realtime-log-pipeline

networks:
  dev-network:
    driver: bridge

volumes:
  postgres-dev-data:
  grafana-dev-data:
  rabbitmq-dev-data:
  prometheus-dev-data:
  loki-dev-data:
  jaeger-dev-data:

services:
  # Database
  postgres:
    image: postgres:17.6
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev-network
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data

  # Message broker with Prometheus metrics
  rabbitmq:
    image: rabbitmq:4.1.3-management
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
      - "15692:15692" # Prometheus metrics port
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=pass
      - RABBITMQ_ENABLED_PLUGINS_FILE=/etc/rabbitmq/enabled_plugins
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - dev-network
    volumes:
      - rabbitmq-dev-data:/var/lib/rabbitmq
      - ./deploy/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:v3.5.0
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-dev-data:/prometheus
    networks:
      - dev-network

  # Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.55
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Collector HTTP endpoint
      - "6831:6831/udp" # Agent compact thrift
      - "6832:6832/udp" # Agent binary thrift
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=info
      - SPAN_STORAGE_TYPE=memory
    networks:
      - dev-network
    volumes:
      - jaeger-dev-data:/tmp

  # Log aggregation
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - dev-network
    volumes:
      - loki-dev-data:/loki

  alloy:
   image: grafana/alloy:v1.10.0
   privileged: true
   ports:
     - 12345:12345
     - 4317:4317
     - 4318:4318
   environment:
      ALLOY_DEPLOY_MODE: docker
   volumes:
      - ./deploy//config.alloy:/etc/alloy/config.alloy
      - /proc:/rootproc:ro
      - /var/run/docker.sock.raw:/var/run/docker.sock
      - /sys:/sys:ro
      - /:/rootfs:ro
      - /dev/disk/:/dev/disk:ro
      - /var/lib/docker/:/var/lib/docker:ro
   command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
   extra_hosts:
        - "host.docker.internal:host-gateway"
   devices:
        - /dev/kmsg

  # Grafana with enhanced observability
  grafana:
    image: grafana/grafana:11.5
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=pass
      - GF_USERS_ALLOW_SIGN_UP=false
      # Enhanced plugins for observability and financial data
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel,grafana-polystat-panel
      # NOTE Only for local development.
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_X_FRAME_OPTIONS=allowall
      # Enable Jaeger tracing
      - GF_TRACING_JAEGER_ADDRESS=jaeger:14268
    volumes:
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-dev-data:/var/lib/grafana
    networks:
      - dev-network
    depends_on:
      - prometheus
      - loki
      - jaeger

  # Optional containerized Go services (use scripts/with_build.sh)
  # Uncomment when you want to run services in containers instead of locally

  # api:
  #   build:
  #     context: .
  #     dockerfile: build.Dockerfile
  #     target: dev
  #   command: ["./scripts/run_service.sh", "api"]
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - PSQL_ADDR=postgres
  #     - PSQL_PORT=5432
  #     - PSQL_USER=user
  #     - PSQL_PASS=pass
  #     - PSQL_DB=db
  #     - PSQL_MAX_CONNS=10
  #     - RABBITMQ_URL=amqp://user:pass@rabbitmq:5672/
  #     - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - dev-network
  #   volumes:
  #     - .:/workspace:cached
  #     - /workspace/target  # Anonymous volume for build artifacts
  #   labels:
  #     - "service.type=application"

  # worker:
  #   build:
  #     context: .
  #     dockerfile: build.Dockerfile
  #     target: dev
  #   command: ["./scripts/run_service.sh", "worker"]
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     - PSQL_ADDR=postgres
  #     - PSQL_PORT=5432
  #     - PSQL_USER=user
  #     - PSQL_PASS=pass
  #     - PSQL_DB=db
  #     - PSQL_MAX_CONNS=10
  #     - RABBITMQ_URL=amqp://user:pass@rabbitmq:5672/
  #     - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - dev-network
  #   volumes:
  #     - .:/workspace:cached
  #     - /workspace/target
  #   labels:
  #     - "service.type=application"

  # aggregator:
  #   build:
  #     context: .
  #     dockerfile: build.Dockerfile
  #     target: dev
  #   command: ["./scripts/run_service.sh", "aggregator"]
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     - PSQL_ADDR=postgres
  #     - PSQL_PORT=5432
  #     - PSQL_USER=user
  #     - PSQL_PASS=pass
  #     - PSQL_DB=db
  #     - PSQL_MAX_CONNS=10
  #     - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - dev-network
  #   volumes:
  #     - .:/workspace:cached
  #     - /workspace/target
  #   labels:
  #     - "service.type=application"

  # streamer:
  #   build:
  #     context: .
  #     dockerfile: build.Dockerfile
  #     target: dev
  #   command: ["./scripts/run_service.sh", "streamer"]
  #   ports:
  #     - "8084:8084"
  #   environment:
  #     - PSQL_ADDR=postgres
  #     - PSQL_PORT=5432
  #     - PSQL_USER=user
  #     - PSQL_PASS=pass
  #     - PSQL_DB=db
  #     - PSQL_MAX_CONNS=10
  #     - RABBITMQ_URL=amqp://user:pass@rabbitmq:5672/
  #     - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - dev-network
  #   volumes:
  #     - .:/workspace:cached
  #     - /workspace/target
  #   labels:
  #     - "service.type=application"
